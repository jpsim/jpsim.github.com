<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apple | JP Simard]]></title>
  <link href="https://jpsim.com/categories/apple/atom.xml" rel="self"/>
  <link href="https://jpsim.com/"/>
  <updated>2023-03-31T15:02:51+00:00</updated>
  <id>https://jpsim.com/</id>
  <author>
    <name><![CDATA[JP Simard]]></name>
    <email><![CDATA[jp@jpsim.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Evaluating SwiftSyntax for use in SwiftLint]]></title>
    <link href="https://jpsim.com/evaluating-swiftsyntax-for-use-in-swiftlint/"/>
    <updated>2018-11-22T14:50:00+00:00</updated>
    <id>https://jpsim.com/evaluating-swiftsyntax-for-use-in-swiftlint</id>
    <content type="html"><![CDATA[<p><strong>tl;dr; Implementing SwiftLint using SwiftSyntax instead of SourceKitten would make it run over 20x slower ðŸ˜­</strong></p>

<p><strong>Update:</strong> Since writing this post, I learnt that SwiftSyntax's upcoming byte tree deserialization mode will speed this up considerably.
I hope to post a follow-up article on this shortly.</p>

<p>I have for some time been looking forward to reimplementing some of <a href="https://github.com/realm/SwiftLint">SwiftLint</a>'s simpler syntax-only rules with <a href="https://github.com/apple/swift-syntax">SwiftSyntax</a>. If you're not familiar with it, the recent <a href="https://nshipster.com/swiftsyntax/">NSHipster article</a> gives a great overview. My motivation for integrating it into SwiftLint was that it would be nice to use an officially maintained library directly to obtain the syntax tree rather than the open source but community-maintained <a href="https://github.com/jpsim/SourceKitten">SourceKitten</a> library. I was also under the false impression that SwiftSyntax would be significantly faster than SourceKit/SourceKitten.</p>

<p>SourceKitten gets its syntax tree by dynamically loading <a href="https://github.com/apple/swift/tree/master/tools/SourceKit">SourceKit</a> and making cross-process XPC calls to a SourceKit daemon. In a typical uncached lint run, SwiftLint spends a significant amount of time waiting on this syntax tree for each file being linted. Because SwiftSyntax is <a href="https://github.com/apple/swift-syntax#building-swiftsyntax-from-master">code-generated</a> from the same syntax definition files as the Swift compiler, I had (incorrectly) assumed that calculating a Swift file's syntax tree using SwiftSyntax was done entirely in-process by the library, which would have lead to significant performance gains by avoiding the cross-process XPC call made by SourceKitten for equivalent functionality.</p>

<p>In reality, SwiftSyntax delegates all parsing &amp; lexing to the <code>swiftc</code> binary, <a href="https://github.com/apple/swift-syntax/blob/0.40200.0/Sources/SwiftSyntax/SwiftSyntax.swift#L100-L101">launching the process</a>, <a href="https://github.com/apple/swift-syntax/blob/0.40200.0/Sources/SwiftSyntax/SwiftSyntax.swift#L102">reading its output from stdout</a> and <a href="https://github.com/apple/swift-syntax/blob/0.40200.0/Sources/SwiftSyntax/SwiftSyntax.swift#L103-L104">deserializing the JSON response</a> into its <code>SourceFileSyntax</code> Swift type. This is repeated for each file being parsed ðŸ˜±.</p>

<p><strong>Launching a new instance of the Swift compiler for each file parsed is orders of magnitude slower than SourceKitten's XPC call to a long-lived SourceKit daemon.</strong></p>

<p>I discovered this after <a href="https://github.com/realm/SwiftLint/pull/2476">reimplementing</a> a very simple SwiftLint rule with a SwiftSyntax-based implementation: <a href="https://github.com/realm/SwiftLint/blob/master/Rules.md#fallthrough">Fallthrough</a>. This opt-in rule is a perfect proof-of-concept for integrating SwiftSyntax into SwiftLint because it literally just finds all occurrences of the <code>fallthrough</code> keyword and reports a violation at that location. I measured the time it took to lint a folder of ~100 Swift files from Lyft's iOS codebase with only the <code>fallthrough</code> rule whitelisted.</p>

<pre><code class="yaml"># .swiftlint.yml configuration file
included:
  - path/to/lint/dir # contains ~100 Swift files
whitelist_rules:
  - fallthrough
</code></pre>

<p>I compiled both SwiftLint from <code>master</code> and again with this <code>fallthrough-swift-syntax</code> branch with <code>swift build -c release</code> and named the binaries <code>swiftlint-master</code> and <code>swiftlint-swift-syntax</code>. I then benchmarked both binaries using the excellent <a href="https://github.com/sharkdp/hyperfine">hyperfine</a> utility.</p>

<pre><code class="shell">$ hyperfine './swiftlint-master lint --quiet --no-cache' './swiftlint-swift-syntax lint --quiet --no-cache'
Benchmark #1: ./swiftlint-master lint --quiet --no-cache
  Time (mean Â± Ïƒ):     231.3 ms Â±   5.1 ms    [User: 130.5 ms, System: 29.2 ms]
  Range (min â€¦ max):   224.3 ms â€¦ 238.3 ms

Benchmark #2: ./swiftlint-swift-syntax lint --quiet --no-cache
  Time (mean Â± Ïƒ):      5.254 s Â±  0.149 s    [User: 20.309 s, System: 23.110 s]
  Range (min â€¦ max):    4.839 s â€¦  5.354 s

Summary
  './swiftlint-master lint --quiet --no-cache' ran
   22.71 Â± 0.82 times faster than './swiftlint-swift-syntax lint --quiet --no-cache'
</code></pre>

<p><strong>The SwiftSyntax version was 22x slower than the existing SourceKitten version</strong></p>

<p><em>Note that I ran SwiftLint with its caching mechanism and logging disabled to accurately measure the time it took just to perform the lint, rather than the overhead from logging or skipping the lint entirely by just returning cached results. Although logging only added 3ms to 10ms in my tests.</em></p>

<hr />

<p>Ultimately, this means SwiftLint will be keeping its SourceKitten-based implementation for the foreseeable future, unless SwiftSyntax removes its reliance on costly compiler invocations and drastically improves its performance. I really hope the Swift team can somehow find a way to move parsing and lexing into SwiftSyntax itself, making the library much more appealing to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC needs to <span>radically</span> change]]></title>
    <link href="https://jpsim.com/wwdc-radically-change/"/>
    <updated>2013-04-26T16:53:00+00:00</updated>
    <id>https://jpsim.com/wwdc-radically-change</id>
    <content type="html"><![CDATA[<p>This is my road (so far) to WWDC13. This should serve as a reminder to my future self to avoid WWDC next year.</p>

<p>The effort that went into getting a ticket is far more than I'm willing to admit... it's JUST a conference, after all! Here's a recap:</p>

<h2>Early April</h2>

<ol>
<li>Start researching WWDC history to be well prepared (see last section). I felt this was critical to get a ticket.</li>
<li>Rumors and trends converge towards a June 10-14 schedule, with an April 25th announcement</li>
<li>Sign up to 2 different WWDC announcement notification services (for redundancy)</li>
<li>Book round-trip flights and accommodations early to avoid much higher costs once they skyrocket after the announcement.</li>
</ol>


<h2>April 25</h2>

<ol>
<li>9:55, start repeatedly refreshing WWDC page</li>
<li>10:00:05, see purchase button, enter info</li>
<li>10:00:55, click "complete order"</li>
<li>Get error, enter info again</li>
<li>10:01:55, click "complete order"</li>
<li>Get redirected to WWDC where it says <a href="http://i97.photobucket.com/albums/l230/Insider2000/SpitCereal.png">"sold out"</a></li>
<li>Mope for a few minutes</li>
<li>Acceptance: Oh well, it's just a conference. I'll take this as a week-long vacation in SF. Go on with the rest of my day.</li>
<li>16:30, receive a phone call from Apple rep saying <strong>"We see you encountered some errors while purchasing your WWDC tickets this morning. I'd like to let you know that we have a ticket reserved for you and we'll be sending you an email with information on how to complete your purchase in the next twelve hours [sic]."</strong></li>
<li>Celebrate for a few minutes</li>
</ol>


<h2>April 26</h2>

<ol>
<li>14:27, receive email from Apple with instructions to complete the purchase</li>
<li>16:00, attempt to complete the purchase but run into another set of errors on:

<ul>
<li>Google Chrome</li>
<li>OS X Safari</li>
<li>iOS Safari</li>
<li>Firefox</li>
<li>reset OS X Safari</li>
<li>it works!</li>
</ul>
</li>
<li>Finally complete the order.</li>
</ol>


<p>Note to self... avoid WWDC next year, people will be resort to writing bots to buy their tickets and the conference will sell out in 0.04s.</p>

<h2>WWDC Stats</h2>

<h2>Conference Dates</h2>

<ul>
<li>2003: June 23 to June 27</li>
<li>2004: June 28 to July 2</li>
<li>2005: June 6 to June 10</li>
<li>2006: August 7 to August 11</li>
<li>2007: June 11 to June 15</li>
<li>2008: June 9 to June 13</li>
<li>2009: June 8 to June 12</li>
<li>2010: June 7 to June 11</li>
<li>2011: June 6 to June 10</li>
<li>2012: June 11 to June 15</li>
</ul>


<h2>Announcement Dates, Times and Sell Out Durations</h2>

<ul>
<li>2010: April 28 (8 days)</li>
<li>2011: March 28 (12hrs: 16x faster than previous year)</li>
<li>2012: April 25 (1h43m: 7x faster than previous year)</li>
<li>2013: April 25, 10:00am (90s: 70x faster than previous year)</li>
</ul>

]]></content>
  </entry>
  
</feed>
